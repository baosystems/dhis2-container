name: stable images

on:
  push:
    paths-ignore:
      - '.env.example'
      - '.github/dependabot.yml'
      - '.github/workflows/notify.yml'
      - '.gitignore'
      - 'LICENSE'
      - 'README.md'
  pull_request:
    branches:
      - main
  schedule:
    - cron: '28 4 * * *'

defaults:
  run:
    shell: bash

jobs:

  set_defaults:
    name: Set defaults

    runs-on: ubuntu-20.04

    steps:

      # It is not possible to use a global env for jobs.baseimage_query.container. Because the
      # value is used again in the outputs, and because we will want to support alternate versions
      # of Tomcat and Java in the future, we will set it a single time in this job and pass the
      # value as an output.
      - name: Set default base image
        id: default_base_image
        run: |
          set -x
          BASE_IMAGE="docker.io/library/tomcat:9-jre11-openjdk-slim-bullseye"
          echo "::set-output name=base_image::$BASE_IMAGE"

    outputs:
      base_image: ${{ steps.default_base_image.outputs.base_image }}


  baseimage_query:
    name: Query versions in base image

    needs: set_defaults

    runs-on: ubuntu-20.04

    container: ${{ needs.set_defaults.outputs.base_image }}  # NOTE: This cannot be ${{ env.EXAMPLE }} or ${{ matrix.example }}

    steps:
      - name: Query versions of Java and Tomcat in base image
        id: tomcat_query
        run: |
          set -x
          echo "::set-output name=java_major::$( sed -r -e 's/^([0-9]+)(\.|u).*$/\1/' <<< "$JAVA_VERSION" )"
          echo "::set-output name=java_version::$JAVA_VERSION"
          echo "::set-output name=tomcat_major::$TOMCAT_MAJOR"
          echo "::set-output name=tomcat_version::$TOMCAT_VERSION"

    outputs:
      java_major: ${{ steps.tomcat_query.outputs.java_major }}
      java_version: ${{ steps.tomcat_query.outputs.java_version }}
      tomcat_major: ${{ steps.tomcat_query.outputs.tomcat_major }}
      tomcat_version: ${{ steps.tomcat_query.outputs.tomcat_version }}

  generate_matrix:
    name: Generate matrix of DHIS2 releases

    runs-on: ubuntu-20.04

    steps:

      - name: Checkout repo to current directory
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Setup Python
        uses: actions/setup-python@f38219332975fe8f9c04cca981d674bf22aea1d3
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python packages
        run: |
          set -x
          pip3 install --requirement .github/workflows/support/matrix/requirements.txt

      - name: Generate matrix
        id: matrix_cmd
        run: |
          set -x
          echo "::set-output name=dhis2_matrix::$( python3 .github/workflows/support/matrix/matrix.py )"

    outputs:
      dhis2_matrix: ${{ steps.matrix_cmd.outputs.dhis2_matrix }}

  build:
    name: Build image

    needs:
      - set_defaults
      - baseimage_query
      - generate_matrix

    runs-on: ubuntu-20.04

    services:
      registry:
        image: docker.io/library/registry:2
        ports:
          - 5000:5000

    strategy:
      matrix: ${{fromJSON(needs.generate_matrix.outputs.dhis2_matrix)}}

    steps:

      - name: Checkout this repository to source/ subdirectory
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          path: source

      - name: Download dhis.war to source/ subdirectory
        id: get_war
        run: |
          set -x

          # Trims full version like "2.36.1" or "2.36-dev" to "2.36" from job matrix
          DHIS2_MAJOR="$( cut -c1-4 <<< "${{ matrix.dhis2_version }}" )"

          if [[ "$DHIS2_MAJOR" == "dev" ]] \
          && [[ "${{ matrix.dhis2_version }}" == "dev" ]]; then
            DHIS2_WAR_URL="https://releases.dhis2.org/$DHIS2_MAJOR/dhis.war"
          elif [[ "${{ matrix.dhis2_version }}" =~ ^2\.[0-9]{2}-dev$ ]]; then
            DHIS2_WAR_URL="https://releases.dhis2.org/$DHIS2_MAJOR/dev/dhis2-dev-${DHIS2_MAJOR}.war"
          else
            DHIS2_WAR_URL="https://releases.dhis2.org/$DHIS2_MAJOR/dhis2-stable-${{ matrix.dhis2_version }}.war"
          fi

          wget \
            --no-verbose \
            --output-document=source/dhis.war \
            "$DHIS2_WAR_URL"

          # Expand to get the contents of build.properties
          unzip -qq source/dhis.war -d source/dhis
          DHIS2_BUILD_PROPERTIES="$( find source/dhis/WEB-INF/lib/ -name 'dhis-service-core-2.*.jar' -exec unzip -p '{}' build.properties \; )"
          echo "::set-output name=build_version::$( awk -F'=' '/^build\.version/ {gsub(/ /, "", $NF); print $NF}' <<< "$DHIS2_BUILD_PROPERTIES" )"
          echo "::set-output name=build_revision::$( awk -F'=' '/^build\.revision/ {gsub(/ /, "", $NF); print $NF}' <<< "$DHIS2_BUILD_PROPERTIES" )"
          echo "::set-output name=build_time::$( awk -F'=' '/^build\.time/ {sub(/ /, "", $NF); print $NF}' <<< "$DHIS2_BUILD_PROPERTIES" )"
          echo "::set-output name=build_date::$( awk -F'=' '/^build\.time/ {sub(/ /, "", $NF); print $NF}' <<< "$DHIS2_BUILD_PROPERTIES" | grep --only-matching --extended-regexp '20[0-9]{2}-[0-9]{2}-[0-9]{2}' )"

      - name: Version helper
        id: versions_helper
        run: |
          set -x

          # Trims full version like "2.36.1" or "2.36.7-SNAPSHOT" to "2.36" from war file build properties
          DHIS2_MAJOR="$( cut -c1-4 <<< "${{ steps.get_war.outputs.build_version }}" )"
          echo "::set-output name=dhis2_major::$DHIS2_MAJOR"

          # Due to limited GHA cache space, only retain Docker cache for latest overall
          if ${{ matrix.latest_overall }}; then
            echo "::set-output name=cache_to::type=gha,mode=max"
          fi

          # Git checkout reference for e2e-tests repository
          if [[ "${{ matrix.dhis2_version }}" == "dev" ]]; then
            E2E_REMOTE_REF='master'
          elif [[ "${{ matrix.dhis2_version }}" =~ ^2\.[0-9]{2}-dev$ ]]; then
            # For a version like "2.37-dev", use "2.37rc". If that doesn't exist, choose the latest as it is likely too new
            if git ls-remote --heads --refs --sort='version:refname' https://github.com/dhis2/e2e-tests.git | awk '/[[:blank:]]+refs\/heads\/[0-9.]+rc$/ {gsub("refs/heads/",""); print $NF}' | grep "^${DHIS2_MAJOR}rc$"
            then
              E2E_REMOTE_REF="${DHIS2_MAJOR}rc"
            else
              E2E_REMOTE_REF="$( git ls-remote --heads --refs --sort='version:refname' https://github.com/dhis2/e2e-tests.git | awk '/[[:blank:]]+refs\/heads\/[0-9.]+rc$/ {gsub("refs/heads/",""); print $NF}' | sort --version-sort | tail -1 )"
            fi
          else
            # The tag for a version may not exist in github.com/dhis2/e2e-tests, such as tag "2.37.0-rc"
            # for version "2.37.1" as of this writing. This logic will determine the appropriate version
            # if there is not a direct match.
            if git ls-remote --tags --refs --sort='version:refname' https://github.com/dhis2/e2e-tests.git | awk '/[[:blank:]]+refs\/tags\/[0-9.]+-rc$/ {gsub("refs/tags/",""); print $NF}' | grep -q "^${{ matrix.dhis2_version }}-rc$"
            then
              E2E_REMOTE_REF="${{ matrix.dhis2_version }}-rc"
            else
              E2E_REMOTE_REF="$( git ls-remote --tags --refs --sort='version:refname' https://github.com/dhis2/e2e-tests.git | awk '/[[:blank:]]+refs\/tags\/[0-9.]+-rc$/ {gsub("refs/tags/",""); print $NF}'| grep "^${DHIS2_MAJOR}" | sort --version-sort | tail -1 )"
            fi
          fi
          echo "::set-output name=e2e_remote_ref::$E2E_REMOTE_REF"

          # Git checkout depth for e2e-tests repository
          if [[ "${{ matrix.dhis2_version }}" =~ ^2\.36\.[012]$ ]] ; then
            echo "::set-output name=e2e_remote_depth::0"
          else
            echo "::set-output name=e2e_remote_depth::1"
          fi

      - name: Container image metadata
        id: image_meta
        uses: docker/metadata-action@e5622373a38e60fb6d795a4421e56882f2d7a681
        with:
          images: ghcr.io/${{ github.repository_owner }}/dhis2
          labels: |
            org.opencontainers.image.base.name=${{ needs.set_defaults.outputs.base_image }}
            org.opencontainers.image.title=dhis2
            org.opencontainers.image.url=https://github.com/baosystems/docker-dhis2/pkgs/container/dhis2
            org.opencontainers.image.version=${{ matrix.dhis2_version }}
            dhis2.build.major=${{ steps.versions_helper.outputs.dhis2_major }}
            dhis2.build.version=${{ steps.get_war.outputs.build_version }}
            dhis2.build.revision=${{ steps.get_war.outputs.build_revision }}
            dhis2.build.time=${{ steps.get_war.outputs.build_time }}
            dhis2.build.date=${{ steps.get_war.outputs.build_date }}
            java.major=${{ needs.baseimage_query.outputs.java_major }}
            java.version=${{ needs.baseimage_query.outputs.java_version }}
            tomcat.major=${{ needs.baseimage_query.outputs.tomcat_major }}
            tomcat.version=${{ needs.baseimage_query.outputs.tomcat_version }}
          flavor: latest=false
          tags: |  # 2nd and 3rd not controlled by a boolean because jobs.lookup_versions always runs on the latest tomcat
            type=raw,value=${{ matrix.dhis2_version }}-tomcat${{ needs.baseimage_query.outputs.tomcat_version }}-jre${{ needs.baseimage_query.outputs.java_major }}-openjdk
            type=raw,value=${{ matrix.dhis2_version }}-tomcat${{ needs.baseimage_query.outputs.tomcat_major }}
            type=raw,value=${{ matrix.dhis2_version }}
            type=raw,value=${{ steps.versions_helper.outputs.dhis2_major }},enable=${{ matrix.latest_major }}
            type=raw,value=latest,enable=${{ matrix.latest_overall }}

      - name: Set up QEMU for amd64 and arm64
        uses: docker/setup-qemu-action@27d0a4f181a40b142cce983c5393082c365d1480
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25
        with:
          driver-opts: network=host  # Required for buildx container to push to local registry

      - name: Multi-platform build and push to local registry
        id: image_build
        uses: docker/build-push-action@a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
        with:
          context: source  # The default is to refer to the github.com sha URL, but we need the context as a directory for the downloaded dhis.war
          file: source/Dockerfile  # NOTE: A dhis.war file must be in the same directory as this file
          platforms: linux/amd64,linux/arm64
          build-args: |
            BASE_IMAGE=${{ needs.set_defaults.outputs.base_image }}
          labels: ${{ steps.image_meta.outputs.labels }}
          tags: localhost:5000/dhis2:${{ matrix.dhis2_version }}-${{ github.sha }}  # The host:port in the tag determines the registry it's pushed to
          pull: true
          push: true
          cache-from: type=gha
          cache-to: ${{ steps.versions_helper.outputs.cache_to }} # https://github.community/t/do-expressions-support-ternary-operators-to-change-their-returned-value/18114/2

      - name: Inspect image in local registry
        run: docker buildx imagetools inspect ${{ fromJSON(steps.image_build.outputs.metadata)['image.name'] }}

      ##########################################################################

      - name: Use image from local registry in Compose
        run: |
          set -x

          sed \
            -r \
            -e "/^\s+image:/ s,ghcr\.io/baosystems/dhis2[^\"]+,${{ fromJSON(steps.image_build.outputs.metadata)['image.name'] }},g" \
            -i \
            source/docker-compose.yml

      - name: Pull Compose stack images
        run: |
          set -x

          docker compose \
            --project-name 'docker-dhis2' \
            --project-directory 'source' \
            --file 'source/docker-compose.yml' \
            --file 'source/.github/workflows/support/docker-compose.override.yml' \
            pull --quiet

      - name: Create and start DHIS2 Compose stack
        run: |
          set -x

          docker compose \
            --project-name 'docker-dhis2' \
            --project-directory 'source' \
            --file 'source/docker-compose.yml' \
            --file 'source/.github/workflows/support/docker-compose.override.yml' \
            up --detach

      - name: Stop DHIS2 container
        run: |
          set -x

          docker compose \
            --project-name 'docker-dhis2' \
            --project-directory 'source' \
            --file 'source/docker-compose.yml' \
            --file 'source/.github/workflows/support/docker-compose.override.yml' \
            stop dhis2

      - name: Empty the database
        run: |
          set -x

          docker compose \
            --project-name 'docker-dhis2' \
            --project-directory 'source' \
            --file 'source/docker-compose.yml' \
            --file 'source/.github/workflows/support/docker-compose.override.yml' \
            run --rm dhis2_init db-empty.sh

      - name: Import sample data
        run: |
          set -x

          if [[ "${{ matrix.dhis2_version }}" =~ ^2\.[0-9]{2}-dev$ ]]; then
            DHIS2_DB_URL="https://databases.dhis2.org/sierra-leone/${{ steps.versions_helper.outputs.dhis2_major }}/dhis2-db-sierra-leone.sql.gz"
          else
            DHIS2_DB_URL="https://databases.dhis2.org/sierra-leone/${{ matrix.dhis2_version }}/dhis2-db-sierra-leone.sql.gz"
          fi

          wget \
            --no-verbose \
            --output-document=/tmp/db.sql.gz \
            "$DHIS2_DB_URL"

          gunzip -c /tmp/db.sql.gz \
          | docker compose \
              --project-name 'docker-dhis2' \
              --project-directory 'source' \
              --file 'source/docker-compose.yml' \
              --file 'source/.github/workflows/support/docker-compose.override.yml' \
              exec -T database psql -q -v 'ON_ERROR_STOP=1' --username='postgres' --dbname='dhis2'

      - name: Start DHIS2 container
        run: |
          set -x

          docker compose \
            --project-name 'docker-dhis2' \
            --project-directory 'source' \
            --file 'source/docker-compose.yml' \
            --file 'source/.github/workflows/support/docker-compose.override.yml' \
            start dhis2

          # Wait 300s for service to be healthy (https://stackoverflow.com/a/58759974)
          timeout 300s bash -c 'until grep -q healthy <( docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" 'docker-dhis2-dhis2-1' ); do sleep 3; done'

      - name: Generate analytics
        run: |
          set -x
          export STATUS_URI="$(
            curl --user 'system:System123' --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 60 --connect-timeout 5 --silent \
              --request POST \
              --location \
              'http://localhost:8080/api/resourceTables/analytics' \
            | jq -r '.response.relativeNotifierEndpoint'
          )"
          set +x

          # Print status messages as they change
          until [[ "$( curl --user 'system:System123' --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 60 --connect-timeout 5 --silent "http://localhost:8080${STATUS_URI}" | jq -r "sort_by(.time, .completed)|.[-1].completed" )" == "true" ]]; do
            STATUS_CURRENT="$( curl --user 'system:System123' --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 60 --connect-timeout 5 --silent "http://localhost:8080${STATUS_URI}" | jq "sort_by(.time, .completed)|.[-1]" )"
            LINE_CURRENT="[$( jq -r ".level" <<<"$STATUS_CURRENT" )] $( jq -r ".time" <<<"$STATUS_CURRENT" ) $( jq -r ".message" <<<"$STATUS_CURRENT" ) (Completed: $( jq -r ".completed" <<<"$STATUS_CURRENT" ))"
            if [[ "${LINE_PREV:-}" != "$LINE_CURRENT" ]]; then
              echo "$LINE_CURRENT"
            fi
            LINE_PREV="$LINE_CURRENT"
            sleep 3
          done

          # Print final status message
          STATUS_LATEST="$( curl --user 'system:System123' --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 60 --connect-timeout 5 --silent "http://localhost:8080${STATUS_URI}" | jq "sort_by(.time, .completed)|.[-1]" )"
          LINE_LATEST="[$( jq -r ".level" <<<"$STATUS_LATEST" )] $( jq -r ".time" <<<"$STATUS_LATEST" ) $( jq -r ".message" <<<"$STATUS_LATEST" ) (Completed: $( jq -r ".completed" <<<"$STATUS_LATEST" ))"
          if [[ "${LINE_PREV:-}" != "$LINE_LATEST" ]]; then
            echo "$LINE_LATEST"
          fi

      ##########################################################################

      - name: Install NodeJS
        uses: actions/setup-node@1f8c6b94b26d0feae1e387ca63ccbdc44d27b561
        with:
          node-version: '14'  # NOTE: A dependency in e2e-tests will not run in v16 or higher
          check-latest: true

      - name: Install Java  # For Selenium
        uses: actions/setup-java@f0bb91606209742fe3ea40199be2f3ef195ecabf
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Checkout dhis/e2e-tests to current directory
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          repository: dhis2/e2e-tests
          ref: ${{ steps.versions_helper.outputs.e2e_remote_ref }}  # "master" for dev, "${{ matrix.dhis2_version }}-rc" for releases; see "versions_helper" for logic
          fetch-depth: ${{ steps.versions_helper.outputs.e2e_remote_depth }}  # default is "1", "0" for certain versions; see "versions_helper" for logic

      - name: Install dependencies for dhis2/e2e-tests
        run: |
          set -x
          npm install

      - name: Fix tests for 2.36.1 and 2.36.2
        if: |
          matrix.dhis2_version == '2.36.1' ||
          matrix.dhis2_version == '2.36.2'
        run: |
          set -x
          git show 2e090dd85936d8e95b5e5ed43ed1ceea7094888a | sed -r -e 's,([ab]/)(step_definitions/),\1tests/\2,g' | git apply --reverse

      - name: Fix tests for 2.38
        if: steps.versions_helper.outputs.dhis2_major == '2.38'
        run: |
          set -x
          sed -r -e 's/(#)(root)/\1dhis2-app-\2/g' -i ./tests/step_definitions/dhis2/capture/capture.js

      - name: Add headless Chrome options to wdio
        run: |
          set -x
          if [[ -f ./tests/config/wdio.local.conf.js ]]; then
            WDIO_CONFIG_PATH="./tests/config/wdio.local.conf.js"
          else
            WDIO_CONFIG_PATH="./wdio.conf.js"
          fi
          sed \
            --regexp-extended \
            --expression="/\s*--disable-web-security/ { s/^(\s*)/\1'--headless','--disable-gpu','--window-size=2048,1536','--ignore-certificate-errors','--disable-extensions','--no-sandbox','--disable-dev-shm-usage',\n\1/ }" \
            --in-place \
            "$WDIO_CONFIG_PATH"

      - name: Cucumber tests  # does NOT require analytics to have been generated
        if: |  # Tests fail on earlier versions for similar reasons as newer Mocha tests
          matrix.dhis2_version != '2.35.0' &&
          matrix.dhis2_version != '2.35.1' &&
          matrix.dhis2_version != '2.35.2' &&
          matrix.dhis2_version != '2.35.3' &&
          matrix.dhis2_version != '2.35.4' &&
          matrix.dhis2_version != '2.35.5' &&
          matrix.dhis2_version != '2.36.0'
        continue-on-error: ${{ endsWith(matrix.dhis2_version, 'dev') }}  # don't block the remaining actions if it fails on dev versions
        env:
          BASE_URL: http://localhost:8080/
          DEBUG: '1'  # Do not run in parallel; there can be more failures in GHA without this due to limited resources
        run: |
          set -x
          npx wdio ./tests/config/wdio.cucumber.conf.js

      ##########################################################################

      - name: Login to GitHub Container Registry
        if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') && !env.ACT }}
        uses: docker/login-action@42d299face0c5c43a0487c477f595ac9cf22f1a7
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy image from local registry and push to public registry
        if: ${{ (github.ref == 'refs/heads/main') && (github.event_name != 'pull_request') && !env.ACT }}
        uses: akhilerm/tag-push-action@f973043dc002b8e5a772c53e79441e6e1861e874
        with:
          src: ${{ fromJSON(steps.image_build.outputs.metadata)['image.name'] }}
          dst: ${{ steps.image_meta.outputs.tags }}

      ##########################################################################

      - name: Upload wdio logs
        if: always()
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
        with:
          name: ${{ matrix.dhis2_version }}_wdio
          path: output/
          retention-days: 8
          if-no-files-found: ignore

      # Archive files before uploading as an artifact because of the following warning without doing so:
      # "There are over 10,000 files in this artifact, consider creating an archive before upload to improve the upload performance."
      - name: Archive allure results
        if: always()
        run: |
          if [[ -d reports/allure-results ]] ; then
            cd reports/
            zip -q -r allure-results.zip allure-results
          fi

      - name: Upload allure results
        if: always()
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
        with:
          name: ${{ matrix.dhis2_version }}_allure
          path: reports/allure-results.zip
          retention-days: 8
          if-no-files-found: ignore

      - name: Destroy DHIS2 Compose stack
        if: always()
        run: |
          set -x
          docker compose \
            --project-name 'docker-dhis2' \
            --project-directory 'source' \
            --file 'source/docker-compose.yml' \
            --file 'source/.github/workflows/support/docker-compose.override.yml' \
            down --volumes --remove-orphans --rmi 'all'
