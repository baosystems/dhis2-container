name: dependencies

on:
  push:
    branches-ignore:
      - 'dependabot/**'
      - 'manual-dependencies/**'
    paths:
      - '.env.example'
      - '.github/workflows/dependencies.yml'
      - 'docker-compose.yml'
      - 'Dockerfile'
  pull_request:
    branches:
      - main
    paths:
      - '.env.example'
      - '.github/workflows/dependencies.yml'
      - 'docker-compose.yml'
      - 'Dockerfile'
  schedule:
    - cron: '3 6 * * *'

defaults:
  run:
    shell: bash

jobs:

  file_dockerfile:
    name: Query versions in Dockerfile
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout this repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: Query version of gosu
        id: gosu
        run: |
          set -x
          echo "version=$( awk -F'=' '/^ARG GOSU_VERSION=/ {print $NF}' Dockerfile )" >> $GITHUB_OUTPUT
      - name: Query version of remco
        id: remco
        run: |
          set -x
          echo "version=$( awk -F'=' '/^ARG REMCO_VERSION=/ {print $NF}' Dockerfile )" >> $GITHUB_OUTPUT
      - name: Query version of wait
        id: wait
        run: |
          set -x
          echo "version=$( awk -F'=' '/^ARG WAIT_VERSION=/ {print $NF}' Dockerfile )" >> $GITHUB_OUTPUT

  file_envexample:
    name: Query versions in .env.example
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout this repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: Query version of DHIS2
        id: dhis2
        run: |
          set -x
          echo "version=$( source .env.example && echo "$DHIS2_TAG" )" >> $GITHUB_OUTPUT
      - name: Query version of Tomcat
        id: tomcat
        run: |
          set -x
          echo "version=$( grep --only-matching --extended-regexp 'tomcat[0-9]{1,2}\.[0-9.]+' .env.example | sed 's/^tomcat//' )" >> $GITHUB_OUTPUT

  github_tags:
    name: Query versions of projects using the GitHub API
    runs-on: ubuntu-20.04
    steps:
      - name: Query latest gosu tag
        id: gosu
        run: |
          set -x
          echo "version=$( curl -fsS https://api.github.com/repos/tianon/gosu/tags | jq --raw-output '.[].name' | sort --version-sort | tail -1 )" >> $GITHUB_OUTPUT
      - name: Query latest remco tag
        id: remco
        run: |
          set -x
          echo "version=$( curl -fsS https://api.github.com/repos/HeavyHorst/remco/tags | jq --raw-output '.[].name' | sed -r 's/^[v.]{1,2}//g' | sort --version-sort | tail -1 )" >> $GITHUB_OUTPUT
      - name: Query latest wait tag
        id: wait
        run: |
          set -x
          echo "version=$( curl -fsS https://api.github.com/repos/ufoscout/docker-compose-wait/tags | jq --raw-output '.[].name' | sort --version-sort | tail -1 )" >> $GITHUB_OUTPUT

  image_latest:
    name: Query versions in the latest ghcr.io/baosystems/dhis2 image
    runs-on: ubuntu-20.04
    container: ghcr.io/baosystems/dhis2:latest
    steps:
      - name: Query version of DHIS2
        id: dhis2
        run: |
          set -x
          echo "version=$( awk -F'=' '/^build\.version/ {gsub(/ /, "", $NF); print $NF}' /opt/dhis2/build.properties )" >> $GITHUB_OUTPUT
      - name: Query version of Tomcat
        id: tomcat
        run: |
          set -x
          echo "version=$TOMCAT_VERSION" >> $GITHUB_OUTPUT

  notify:
    name: Notify of dependencies that need to be updated

    if: |
      needs.file_dockerfile.outputs.gosu != needs.github_tags.outputs.gosu
      || needs.file_dockerfile.outputs.remco != needs.github_tags.outputs.remco
      || needs.file_dockerfile.outputs.wait != needs.github_tags.outputs.wait

    needs:
      - file_dockerfile
      - github_tags

    runs-on: ubuntu-20.04

    steps:

      - name: Send message to Slack about gosu version in Dockerfile
        if: ${{ needs.file_dockerfile.outputs.gosu != needs.github_tags.outputs.gosu }}
        uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: "{\"level\": \":warning: WARNING\", \"message\": \"gosu version in Dockerfile (${{ needs.file_dockerfile.outputs.gosu }}) does not match the latest tag in github.com/tianon/gosu (${{ needs.github_tags.outputs.gosu }})\"}"

      - name: Send message to Slack about remco version in Dockerfile
        if: ${{ needs.file_dockerfile.outputs.remco != needs.github_tags.outputs.remco }}
        uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: "{\"level\": \":warning: WARNING\", \"message\": \"remco version in Dockerfile (${{ needs.file_dockerfile.outputs.remco }}) does not match the latest tag in github.com/HeavyHorst/remco (${{ needs.github_tags.outputs.remco }})\"}"

      - name: Send message to Slack about wait version in Dockerfile
        if: ${{ needs.file_dockerfile.outputs.wait != needs.github_tags.outputs.wait }}
        uses: slackapi/slack-github-action@007b2c3c751a190b6f0f040e47ed024deaa72844
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          payload: "{\"level\": \":warning: WARNING\", \"message\": \"wait version in Dockerfile (${{ needs.file_dockerfile.outputs.wait }}) does not match the latest tag in github.com/ufoscout/docker-compose-wait (${{ needs.github_tags.outputs.wait }})\"}"

  envexample:
    name: Update versions in .env.example and create auto-merging pull request

    if: |
      needs.file_envexample.outputs.dhis2 != needs.image_latest.outputs.dhis2
      || needs.file_envexample.outputs.tomcat != needs.image_latest.outputs.tomcat

    needs:
      - file_envexample
      - image_latest

    runs-on: ubuntu-20.04

    steps:

      - name: Checkout this repository
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8

      - name: Update version of DHIS2
        if: ${{ needs.file_envexample.outputs.dhis2 != needs.image_latest.outputs.dhis2 }}
        run: |
          set -x

          echo '[DEBUG] DHIS2_TAG_CURRENT=${{ needs.file_envexample.outputs.dhis2 }}'
          echo '[DEBUG] DHIS2_TAG_NEXT=${{ needs.image_latest.outputs.dhis2 }}'

          DHIS2_MAJOR_CURRENT="$( cut -c1-4 <<< "${{ needs.file_envexample.outputs.dhis2 }}" )"
          DHIS2_MAJOR_NEXT="$( cut -c1-4 <<< "${{ needs.image_latest.outputs.dhis2 }}" )"
          echo "[DEBUG] DHIS2_MAJOR_CURRENT=$DHIS2_MAJOR_CURRENT"
          echo "[DEBUG] DHIS2_MAJOR_NEXT=$DHIS2_MAJOR_NEXT"

          sed \
            -e 's/${{ needs.file_envexample.outputs.dhis2 }}/${{ needs.image_latest.outputs.dhis2 }}/g' \
            -e "s/${DHIS2_MAJOR_CURRENT}/${DHIS2_MAJOR_NEXT}/g" \
            -i .env.example

          echo '[DEBUG] contents of .env.example:'
          cat .env.example

      - name: Update version of Tomcat
        if: ${{ needs.file_envexample.outputs.tomcat != needs.image_latest.outputs.tomcat }}
        run: |
          set -x

          echo '[DEBUG] current=${{ needs.file_envexample.outputs.tomcat }}'
          echo '[DEBUG] next=${{ needs.image_latest.outputs.tomcat }}'

          sed \
            -e 's/${{ needs.file_envexample.outputs.tomcat }}/${{ needs.image_latest.outputs.tomcat }}/g' \
            -i .env.example

          echo '[DEBUG] contents of .env.example:'
          cat .env.example

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04
        with:
          # GITHUB_TOKEN does not have "repo" permissions (https://docs.github.com/en/actions/security-guides/automatic-token-authentication)
          # Personal Access Token with "repo" is necessary to create commits
          token: ${{ secrets.PAT }}  # Added at https://github.com/baosystems/docker-dhis2/settings/secrets/actions
          author: baosystems[utility] <100785015+baosystems-utility@users.noreply.github.com>  # Public profile name and private email for the owner of the PAT
          commit-message: "chore: update dependencies in .env.example"
          title: Update dependencies in .env.example
          add-paths: |
            .env.example
          delete-branch: true
          branch: manual-dependencies/envexample
          labels: |
            dependencies

      - name: Enable Pull Request Automerge
        if: steps.cpr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@127dd0d855f673047637945655ee76f0e9f239fe
        with:
          token: ${{ secrets.PAT }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: rebase

      - name: Auto-approve Pull Request
        if: steps.cpr.outputs.pull-request-operation == 'created'
        uses: juliangruber/approve-pull-request-action@6b8b2f82d50cea1e4329bcdfe940a6ceccbe528e
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.cpr.outputs.pull-request-number }}

  check:
    name: Check if required jobs passed  # this job name is to be used as the single required status check in branch protection

    if: always()

    needs:
      - file_dockerfile
      - file_envexample
      - github_tags
      - image_latest
      - notify
      - envexample

    runs-on: ubuntu-20.04

    steps:

      # See https://github.com/re-actors/alls-green/blob/3a2de129/README.md for why this is here
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe
        with:
          allowed-skips: notify, envexample
          jobs: ${{ toJSON(needs) }}
